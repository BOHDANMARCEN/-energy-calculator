#!/usr/bin/env python3
"""
–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó

–û–±—á–∏—Å–ª—é—î –µ–ª–µ–∫—Ç—Ä–∏—á–Ω—É –µ–Ω–µ—Ä–≥—ñ—é —Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç—É—î –º—ñ–∂ —Ä—ñ–∑–Ω–∏–º–∏ –æ–¥–∏–Ω–∏—Ü—è–º–∏ –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è.

from typing import Union, Dict, Optional
import logging
from datetime import datetime

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    filename=f'energy_calculator_{datetime.now().strftime("%Y%m%d")}.log'
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
CONVERSION_FACTORS: Dict[str, float] = {
    'kWh': 1/3.6e6,  # 1 –∫–í—Ç¬∑–≥–æ–¥ = 3.6e6 –î–∂
    'MJ': 1/1e6,     # 1 –ú–î–∂ = 1e6 –î–∂
    'Wh': 1/3600,    # 1 –í—Ç¬∑–≥–æ–¥ = 3600 –î–∂
    'cal': 1/4.184,  # 1 –∫–∞–ª = 4.184 –î–∂
    'kcal': 1/4184   # 1 –∫–∫–∞–ª = 4184 –î–∂
}

def validate_input(value: float, name: str) -> None:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö.
    
    Args:
        value: –ó–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        name: –ù–∞–∑–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
    
    Raises:
        ValueError: –Ø–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –≤—ñ–¥'—î–º–Ω–µ –∞–±–æ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–µ
    """
    if value < 0:
        raise ValueError(f"{name} –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω–∏–º —á–∏—Å–ª–æ–º")
    if value > 1e12:
        raise ValueError(f"{name} –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–µ (max: 1e12)")

def calculate_energy(power_watts: float, time_seconds: float) -> float:
    """
    –û–±—á–∏—Å–ª—é—î –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—é –≤ –¥–∂–æ—É–ª—è—Ö.
    
    Args:
        power_watts: –ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å —É –í–∞—Ç–∞—Ö (W)
        time_seconds: –ß–∞—Å —É —Å–µ–∫—É–Ω–¥–∞—Ö (s)
    
    Returns:
        float: –ï–Ω–µ—Ä–≥—ñ—è –≤ –¥–∂–æ—É–ª—è—Ö (J)
    
    Raises:
        ValueError: –Ø–∫—â–æ –≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ
    """
    validate_input(power_watts, "–ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å")
    validate_input(time_seconds, "–ß–∞—Å")
    
    energy = power_watts * time_seconds
    logging.info(f"–û–±—á–∏—Å–ª–µ–Ω–æ –µ–Ω–µ—Ä–≥—ñ—é: {energy:.2f} –î–∂")
    return energy

def convert_energy(energy_joules: float, target_unit: str) -> float:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç—É—î –µ–Ω–µ—Ä–≥—ñ—é –∑ –¥–∂–æ—É–ª—ñ–≤ —É –≤–∫–∞–∑–∞–Ω—É –æ–¥–∏–Ω–∏—Ü—é.
    
    Args:
        energy_joules: –ï–Ω–µ—Ä–≥—ñ—è –≤ –¥–∂–æ—É–ª—è—Ö (J)
        target_unit: –û–¥–∏–Ω–∏—Ü—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó ('kWh', 'MJ', 'Wh', 'cal', 'kcal')
    
    Returns:
        float: –ï–Ω–µ—Ä–≥—ñ—è —É –≤–∏–±—Ä–∞–Ω—ñ–π –æ–¥–∏–Ω–∏—Ü—ñ
    
    Raises:
        ValueError: –Ø–∫—â–æ –≤–∫–∞–∑–∞–Ω–∞ –Ω–µ–≤—ñ–¥–æ–º–∞ –æ–¥–∏–Ω–∏—Ü—è –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è
    """
    if target_unit not in CONVERSION_FACTORS:
        raise ValueError(
            f"–ù–µ–≤—ñ–¥–æ–º–∞ –æ–¥–∏–Ω–∏—Ü—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó: {target_unit}. "
            f"–î–æ—Å—Ç—É–ø–Ω—ñ –æ–¥–∏–Ω–∏—Ü—ñ: {', '.join(CONVERSION_FACTORS.keys())}"
        )
    
    result = energy_joules * CONVERSION_FACTORS[target_unit]
    logging.info(f"–ö–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ {energy_joules:.2f} –î–∂ –≤ {result:.4f} {target_unit}")
    return result

def format_energy(value: float, unit: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç—É—î –∑–Ω–∞—á–µ–Ω–Ω—è –µ–Ω–µ—Ä–≥—ñ—ó –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è.
    
    Args:
        value: –ó–Ω–∞—á–µ–Ω–Ω—è –µ–Ω–µ—Ä–≥—ñ—ó
        unit: –û–¥–∏–Ω–∏—Ü—è –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è
    
    Returns:
        str: –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —Ä—è–¥–æ–∫
    """
    if value >= 1e6:
        return f"{value:,.2e} {unit}"
    return f"{value:,.4f} {unit}"

def main() -> None:
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø—Ä–æ–≥—Ä–∞–º–∏."""
    print("üîã –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó\n")
    
    try:
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        power = float(input("–í–≤–µ–¥—ñ—Ç—å –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—å —É –í–∞—Ç–∞—Ö (W): "))
        time = float(input("–í–≤–µ–¥—ñ—Ç—å —á–∞—Å —É —Å–µ–∫—É–Ω–¥–∞—Ö (s): "))
        
        # –û–±—á–∏—Å–ª–µ–Ω–Ω—è –µ–Ω–µ—Ä–≥—ñ—ó
        energy_joules = calculate_energy(power, time)
        print(f"\n–û–±—á–∏—Å–ª–µ–Ω–∞ –µ–Ω–µ—Ä–≥—ñ—è: {format_energy(energy_joules, '–î–∂ (J)')}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è
        print(f"\n–î–æ—Å—Ç—É–ø–Ω—ñ –æ–¥–∏–Ω–∏—Ü—ñ: {', '.join(CONVERSION_FACTORS.keys())}")
        target_unit = input("–í–≤–µ–¥—ñ—Ç—å –æ–¥–∏–Ω–∏—Ü—é –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó: ").strip()
        
        converted_energy = convert_energy(energy_joules, target_unit)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {format_energy(converted_energy, target_unit)}")
        
    except ValueError as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è: {e}")
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    except Exception as e:
        logging.error(f"–ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        print("‚ùå –°—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥-—Ñ–∞–π–ª.")

if __name__ == "__main__":
    main()
